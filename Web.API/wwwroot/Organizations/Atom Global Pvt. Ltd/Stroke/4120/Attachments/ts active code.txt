import { Component, OnInit } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import camelcase from 'camelcase';
import { Modules, States } from 'src/app/enums/enum';
import { DataService } from 'src/app/services/data.service';
import { NavigationService } from 'src/app/services/navigation.service';
import { ToasterService } from 'src/app/services/toaster.service';
import { ActiveCodesService } from '../../administration/facility-management/components/activate-codes/active-codes.service';
import { UsersService } from '../../administration/users/service/users.service';


@Component({
  selector: 'app-code-strok-form',
  templateUrl: './code-strok-form.component.html',
  styleUrls: ['./code-strok-form.component.scss']
})
export class CodeStrokFormComponent implements OnInit {
  form = this.fb.group({});
  submitted = false;
  data: any;
  binary = true;
  selectedOrganization: any;
  codeName: any = "Stroke";
  existing: any;
  nullException: string = '';
  showProgressSpinner: boolean = false;
  disabledSubmit: boolean = false;
  checkBoxFieldRequired: boolean = false;
  inhouseCodeSubmitBtnCheck: boolean = false;
  genders: any;
  bloodThinner: any;
  activeCodes: any;

  constructor(private fb: FormBuilder,
    public activeCodeService: ActiveCodesService,
    private nav: NavigationService,
    private dataService: DataService,
    private toastService: ToasterService,
    private userService: UsersService,
  ) {
    this.selectedOrganization = this.dataService._organizationId
  }

  ngOnInit(): void {
    this.getCodeStrokeFromData()
    
  }

// code Stroke form data //
getCodeStrokeFromData(){
  this.showProgressSpinner = true;
  this.activeCodeService.getCodeStrokFormByOrgId(this.selectedOrganization, this.codeName).subscribe({
    next:(res: any) => {
      if(res.status == 200){
        this.data = res.body;
        this.createForm(this.data);
        this.showProgressSpinner = false;
      }
    },
    error:() =>{
      this.showProgressSpinner = false;
    }
  })
}
  // create form //
  createForm(controls: JsonFormControls[]) {
    /** SORT controls here **/
    for (const control of controls) {

      const validatorsToAdd = [];
      if (control.isRequired) {
        validatorsToAdd.push(Validators.required);
       
      } 
      if (control.fieldDataLength != null) {
        validatorsToAdd.push(Validators.maxLength(control.fieldDataLength))
      }
      if (control.fieldDataType == 'email')
        validatorsToAdd.push(Validators.email);

      if (control.fieldName === 'inhouseCodesFieldId') {

      }
      debugger
      if (control.fieldDataType == 'dropdown') {
        this.dataService.getUCLData([control.fieldData]).subscribe((res: any) => {
          if (res.status == 200) {
            control.ddlList = res.body[control.fieldName];
          }
        })
      }
      this.form.addControl(
        control.fieldName,
        this.fb.control(control.fieldDataType == 'checkbox' ? false : null, validatorsToAdd)
      );
      if (this.existing) {
        if (control.fieldDataType == "date") {
          this.form.controls[control.fieldName].patchValue(new Date(this.existing[camelcase(control.fieldName)]))
        } else if (control.fieldDataType == "dropdown") {
          this.form.controls[control.fieldName].patchValue(parseInt(this.existing[camelcase(control.fieldName)]))
        } else if (control.fieldDataType == "checkbox") {
          this.form.controls[control.fieldName].patchValue(this.existing[camelcase(control.fieldName)])
        }
        else {
          this.form.controls[control.fieldName].patchValue(this.existing[camelcase(control.fieldName)])
        }
      }
    }
    // if (this.consultService._consultantStatus == "false") {
    //   this.form.disable();
    //   this.consultSubmitBtnCheck = true;
    // }
    // else {
    //   this.form.enable();
    //   this.consultSubmitBtnCheck = false;
    // }
  }

  get f() {
    return this.form.controls
  }



// submit form //
Save() {
  let formEntity: any = {}
  this.showProgressSpinner = true;
  this.disabledSubmit = true;
  Object.keys(this.form.controls).forEach(key => {
    formEntity[key] = this.form.controls[key].value;
  })
  if (!formEntity['inhouseCodesFieldId']) {
    if (this.existing) {
      formEntity['inhouseCodesFieldId'] = this.existing.consultId;
    } else {
      formEntity['inhouseCodesFieldId'] = 0;
    }

  }
  // if (!formEntity['ServiceLineIdFk']) {
  //   formEntity['ServiceLineIdFk'] = this.consultService._serviceLineId;;
  // }
  // if (!formEntity['IsNewPatient']) {
  //   formEntity['IsNewPatient'] = this.consultService._isNewPatient;
  // }

  this.data.forEach((element: any) => {
    if (element.fieldDataType == 'date') {
      formEntity[element.fieldName] = formEntity[element.fieldName].toLocaleString().replace(",", "")
    }
  });
  // this.consultService.AddOrUpdateConsult(formEntity).subscribe((res: any) => {
  //   if (res && res.status == 200) {

  //     if (formEntity['ConsultId'] == 0) {
  //       this.toastService.itemAdded();
  //       this.showProgressSpinner = false;
  //     } else if (formEntity['ConsultId'] > 0) {
  //       this.toastService.itemUpdated();
  //       this.showProgressSpinner = false;
  //     }

  //   }
  //   this.showProgressSpinner = false;
  //   this.changeRoute();
  // });

}

Edit() {
  let formEntity: any = {}
  Object.keys(this.form.controls).forEach(key => {
    formEntity[key] = this.form.controls[key].value;
  })

  // if (!formEntity['ConsultId']) {
  //   formEntity['ConsultId'] = 0;
  // }
  // if (!formEntity['ServiceLineIdFk']) {
  //   formEntity['ServiceLineIdFk'] = this.consultService._serviceLineId;;
  // }
  // // ConsultType
  // if (!formEntity['ConsultType']) {
  //   formEntity['ConsultType'] = 'Urgent';;
  // }
  // if (!formEntity['IsNewPatient']) {
  //   formEntity['IsNewPatient'] = this.consultService._isNewPatient;
  // }
  // this.consultService.AddOrUpdateConsult(formEntity).subscribe((res: any) => {
  //   if (res && res.status == 200) {

  //     this.toastService.itemAdded();
  //     this.showProgressSpinner = false;
  //   }
  // });
  this.showProgressSpinner = false;
  this.nav.changeRoute(`/${Modules.Home}/${Modules.ActivateCode}`);
}



  isValid(controlName: any) {
    // if (controlName == 'IsCallbackRequired' && this.f[controlName].value == false && this.checkBoxFieldRequired) {
    //   this.f[controlName].setErrors({ required: true })
    // }
    const error = this.f[controlName]['errors']
    if (error != null && error['required']) {
      return true
    }
    else {
      return false
    }
    // return this.f[controlName].invalid;
  }

  isMaxLenExceed(controlName: any, length: number) {
    const error = this.f[controlName]['errors']
    if (error != null && error['maxlength']) {
      return (this.f[controlName].value.length > length)
    } else {
      return false;
    }
  }
  changeRoute() {
    // if (this.consultService._fromDashboard)
    //   this.nav.changeRoute(`/${Modules.Home}/${Modules.Dashboard}`);
    // else
      this.nav.changeRoute(`/${Modules.Home}/${Modules.ActivateCode}`);
  }
}



///////////////////////// interface /////////////////////////

interface JsonFormControls {
  inhouseCodesFieldId: number;
  createdBy: number;
  createdDate: Date;
  fieldDataType: string;
  fieldDataLength: number;
  fieldData: number;
  fieldLabel: string;
  fieldName: string;
  fieldType: string;
  isDeleted: false
  isSelected: false
  sortOrder: number;
  isRequired: boolean;
  ddlList: any[];
}

export interface JsonFormData {
  controls: JsonFormControls[];
}






//service method

getCodeStrokFormByOrgId(orgId: any, codeName: any) {
    return this.http.get(this.config.api_url + '/InhouseCode/GetInhouseCodeFormByOrgId/' + orgId + '/' + codeName)
  }